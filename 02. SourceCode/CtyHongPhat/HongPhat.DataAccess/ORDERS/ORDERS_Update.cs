//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    1/13/2010
//     Time:    10:19 PM
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HongPhat.DataAccess
{
	#region ORDERS_Update Wrapper
    /// <summary>
    /// This class is a wrapper for the ORDERS_Update stored procedure.
    /// </summary>
    public class ORDERS_Update
    {
		#region Member Variables
		protected string _connectionString = String.Empty;
		protected int _recordsAffected = -1;
		protected int _returnValue = 0;
		protected SqlInt32 _orderId = SqlInt32.Null;
		protected bool _orderIdSet = false;
		protected SqlInt32 _orderKind = SqlInt32.Null;
		protected bool _orderKindSet = false;
		protected SqlInt32 _customerId = SqlInt32.Null;
		protected bool _customerIdSet = false;
		protected SqlString _createdBy = SqlString.Null;
		protected bool _createdBySet = false;
		protected SqlDateTime _createdDate = SqlDateTime.Null;
		protected bool _createdDateSet = false;
		protected SqlString _modifiedBy = SqlString.Null;
		protected bool _modifiedBySet = false;
		protected SqlDateTime _modifiedDate = SqlDateTime.Null;
		protected bool _modifiedDateSet = false;
		protected SqlDecimal _total = SqlDecimal.Null;
		protected bool _totalSet = false;
		protected SqlDecimal _pay = SqlDecimal.Null;
		protected bool _paySet = false;
		protected SqlInt32 _status = SqlInt32.Null;
		protected bool _statusSet = false;
		protected SqlString _note = SqlString.Null;
		protected bool _noteSet = false;
		#endregion
		
		#region Constructors
		public ORDERS_Update()
		{
		}
		
		public ORDERS_Update(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		#endregion
		
		#region Public Properties
		/// <summary>
		/// The connection string to use when executing the ORDERS_Update stored procedure.
		/// </summary>
		public string ConnectionString
		{
			get {return _connectionString;}
			set {_connectionString = value;}
		}
		
		/// <summary>
		/// Gets the return value from the ORDERS_Update stored procedure.
		/// </summary>
		public int ReturnValue
		{
			get {return _returnValue;}
		}
		
		/// <summary>
		/// Gets the number of rows changed, inserted, or deleted by execution of the ORDERS_Update stored procedure.
		/// </summary>
		public int RecordsAffected
		{
			get {return _recordsAffected;}
		}
		
		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 OrderId
		{
			get {return _orderId;}
			set
			{
				_orderId = value;
				_orderIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 OrderKind
		{
			get {return _orderKind;}
			set
			{
				_orderKind = value;
				_orderKindSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 CustomerId
		{
			get {return _customerId;}
			set
			{
				_customerId = value;
				_customerIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString CreatedBy
		{
			get {return _createdBy;}
			set
			{
				_createdBy = value;
				_createdBySet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlDateTime CreatedDate
		{
			get {return _createdDate;}
			set
			{
				_createdDate = value;
				_createdDateSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString ModifiedBy
		{
			get {return _modifiedBy;}
			set
			{
				_modifiedBy = value;
				_modifiedBySet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlDateTime ModifiedDate
		{
			get {return _modifiedDate;}
			set
			{
				_modifiedDate = value;
				_modifiedDateSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlDecimal Total
		{
			get {return _total;}
			set
			{
				_total = value;
				_totalSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlDecimal Pay
		{
			get {return _pay;}
			set
			{
				_pay = value;
				_paySet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 Status
		{
			get {return _status;}
			set
			{
				_status = value;
				_statusSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString Note
		{
			get {return _note;}
			set
			{
				_note = value;
				_noteSet = true;
			}
		}
		#endregion
		
		#region Execute Methods
		/// <summary>
		/// This method calls the ORDERS_Update stored procedure.
		/// </summary>
		public virtual void Execute()
		{
			SqlCommand cmd = new SqlCommand();
			
			System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectionString property before calling this method.");
			SqlConnection cn = new SqlConnection(this.ConnectionString);
			
			try
			{
				cmd.Connection = cn;
				cmd.CommandText = "[dbo].[ORDERS_Update]";
				cmd.CommandType = CommandType.StoredProcedure;
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				SqlParameter prmOrderId = cmd.Parameters.Add("@OrderId", SqlDbType.Int);
				prmOrderId.Direction = ParameterDirection.Input;
				if (_orderIdSet == true || this.OrderId.IsNull == false)
				{
					prmOrderId.Value = this.OrderId;
				}
				
				SqlParameter prmOrderKind = cmd.Parameters.Add("@OrderKind", SqlDbType.Int);
				prmOrderKind.Direction = ParameterDirection.Input;
				if (_orderKindSet == true || this.OrderKind.IsNull == false)
				{
					prmOrderKind.Value = this.OrderKind;
				}
				
				SqlParameter prmCustomerId = cmd.Parameters.Add("@CustomerId", SqlDbType.Int);
				prmCustomerId.Direction = ParameterDirection.Input;
				if (_customerIdSet == true || this.CustomerId.IsNull == false)
				{
					prmCustomerId.Value = this.CustomerId;
				}
				
				SqlParameter prmCreatedBy = cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar);
				prmCreatedBy.Direction = ParameterDirection.Input;
					prmCreatedBy.Size = 250;
				if (_createdBySet == true || this.CreatedBy.IsNull == false)
				{
					prmCreatedBy.Value = this.CreatedBy;
				}
				
				SqlParameter prmCreatedDate = cmd.Parameters.Add("@CreatedDate", SqlDbType.DateTime);
				prmCreatedDate.Direction = ParameterDirection.Input;
				if (_createdDateSet == true || this.CreatedDate.IsNull == false)
				{
					prmCreatedDate.Value = this.CreatedDate;
				}
				
				SqlParameter prmModifiedBy = cmd.Parameters.Add("@ModifiedBy", SqlDbType.NVarChar);
				prmModifiedBy.Direction = ParameterDirection.Input;
					prmModifiedBy.Size = 250;
				if (_modifiedBySet == true || this.ModifiedBy.IsNull == false)
				{
					prmModifiedBy.Value = this.ModifiedBy;
				}
				
				SqlParameter prmModifiedDate = cmd.Parameters.Add("@ModifiedDate", SqlDbType.DateTime);
				prmModifiedDate.Direction = ParameterDirection.Input;
				if (_modifiedDateSet == true || this.ModifiedDate.IsNull == false)
				{
					prmModifiedDate.Value = this.ModifiedDate;
				}
				
				SqlParameter prmTotal = cmd.Parameters.Add("@Total", SqlDbType.Decimal);
				prmTotal.Direction = ParameterDirection.Input;
					prmTotal.Precision = 18;
					prmTotal.Scale = 0;
				if (_totalSet == true || this.Total.IsNull == false)
				{
					prmTotal.Value = this.Total;
				}
				
				SqlParameter prmPay = cmd.Parameters.Add("@Pay", SqlDbType.Decimal);
				prmPay.Direction = ParameterDirection.Input;
					prmPay.Precision = 18;
					prmPay.Scale = 0;
				if (_paySet == true || this.Pay.IsNull == false)
				{
					prmPay.Value = this.Pay;
				}
				
				SqlParameter prmStatus = cmd.Parameters.Add("@Status", SqlDbType.Int);
				prmStatus.Direction = ParameterDirection.Input;
				if (_statusSet == true || this.Status.IsNull == false)
				{
					prmStatus.Value = this.Status;
				}
				
				SqlParameter prmNote = cmd.Parameters.Add("@Note", SqlDbType.Text);
				prmNote.Direction = ParameterDirection.Input;
					prmNote.Size = 16;
				if (_noteSet == true || this.Note.IsNull == false)
				{
					prmNote.Value = this.Note;
				}
				#endregion
				
				#region Execute Command
				cn.Open();
				_recordsAffected = cmd.ExecuteNonQuery();
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (int)prmReturnValue.Value;
				}
				
				#endregion
			}
			finally
			{
				if (cn.State == ConnectionState.Open)
				{
					cn.Close();
				}
				
				cn.Dispose();
				cmd.Dispose();
			}
		}
		
		/// <summary>
		/// This method calls the ORDERS_Update stored procedure.
		/// </summary>
		/// <param name="connectionString">The connection string to use</param>
		/// <param name="orderId"></param>
		/// <param name="orderKind"></param>
		/// <param name="customerId"></param>
		/// <param name="createdBy"></param>
		/// <param name="createdDate"></param>
		/// <param name="modifiedBy"></param>
		/// <param name="modifiedDate"></param>
		/// <param name="total"></param>
		/// <param name="pay"></param>
		/// <param name="status"></param>
		/// <param name="note"></param>
		public static void Execute(
				#region Parameters
				string connectionString,
				SqlInt32 orderId,
				SqlInt32 orderKind,
				SqlInt32 customerId,
				SqlString createdBy,
				SqlDateTime createdDate,
				SqlString modifiedBy,
				SqlDateTime modifiedDate,
				SqlDecimal total,
				SqlDecimal pay,
				SqlInt32 status,
				SqlString note
				#endregion
		    )
		{
			ORDERS_Update oRDERS_Update = new ORDERS_Update();
			
			#region Assign Property Values
			oRDERS_Update.ConnectionString = connectionString;
			oRDERS_Update.OrderId = orderId;
			oRDERS_Update.OrderKind = orderKind;
			oRDERS_Update.CustomerId = customerId;
			oRDERS_Update.CreatedBy = createdBy;
			oRDERS_Update.CreatedDate = createdDate;
			oRDERS_Update.ModifiedBy = modifiedBy;
			oRDERS_Update.ModifiedDate = modifiedDate;
			oRDERS_Update.Total = total;
			oRDERS_Update.Pay = pay;
			oRDERS_Update.Status = status;
			oRDERS_Update.Note = note;
			#endregion
			
			oRDERS_Update.Execute();
			
			#region Get Property Values
			
			#endregion
		}
		#endregion
	}
	#endregion
}
