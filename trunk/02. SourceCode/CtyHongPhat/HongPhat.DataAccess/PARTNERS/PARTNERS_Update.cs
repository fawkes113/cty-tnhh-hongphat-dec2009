//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    1/13/2010
//     Time:    10:19 PM
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HongPhat.DataAccess
{
	#region PARTNERS_Update Wrapper
    /// <summary>
    /// This class is a wrapper for the PARTNERS_Update stored procedure.
    /// </summary>
    public class PARTNERS_Update
    {
		#region Member Variables
		protected string _connectionString = String.Empty;
		protected int _recordsAffected = -1;
		protected int _returnValue = 0;
		protected SqlInt32 _partnerId = SqlInt32.Null;
		protected bool _partnerIdSet = false;
		protected SqlString _partnerName = SqlString.Null;
		protected bool _partnerNameSet = false;
		protected SqlString _address = SqlString.Null;
		protected bool _addressSet = false;
		protected SqlString _phoneNumber = SqlString.Null;
		protected bool _phoneNumberSet = false;
		#endregion
		
		#region Constructors
		public PARTNERS_Update()
		{
		}
		
		public PARTNERS_Update(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		#endregion
		
		#region Public Properties
		/// <summary>
		/// The connection string to use when executing the PARTNERS_Update stored procedure.
		/// </summary>
		public string ConnectionString
		{
			get {return _connectionString;}
			set {_connectionString = value;}
		}
		
		/// <summary>
		/// Gets the return value from the PARTNERS_Update stored procedure.
		/// </summary>
		public int ReturnValue
		{
			get {return _returnValue;}
		}
		
		/// <summary>
		/// Gets the number of rows changed, inserted, or deleted by execution of the PARTNERS_Update stored procedure.
		/// </summary>
		public int RecordsAffected
		{
			get {return _recordsAffected;}
		}
		
		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 PartnerId
		{
			get {return _partnerId;}
			set
			{
				_partnerId = value;
				_partnerIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString PartnerName
		{
			get {return _partnerName;}
			set
			{
				_partnerName = value;
				_partnerNameSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString Address
		{
			get {return _address;}
			set
			{
				_address = value;
				_addressSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString PhoneNumber
		{
			get {return _phoneNumber;}
			set
			{
				_phoneNumber = value;
				_phoneNumberSet = true;
			}
		}
		#endregion
		
		#region Execute Methods
		/// <summary>
		/// This method calls the PARTNERS_Update stored procedure.
		/// </summary>
		public virtual void Execute()
		{
			SqlCommand cmd = new SqlCommand();
			
			System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectionString property before calling this method.");
			SqlConnection cn = new SqlConnection(this.ConnectionString);
			
			try
			{
				cmd.Connection = cn;
				cmd.CommandText = "[dbo].[PARTNERS_Update]";
				cmd.CommandType = CommandType.StoredProcedure;
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				SqlParameter prmPartnerId = cmd.Parameters.Add("@PartnerId", SqlDbType.Int);
				prmPartnerId.Direction = ParameterDirection.Input;
				if (_partnerIdSet == true || this.PartnerId.IsNull == false)
				{
					prmPartnerId.Value = this.PartnerId;
				}
				
				SqlParameter prmPartnerName = cmd.Parameters.Add("@PartnerName", SqlDbType.NVarChar);
				prmPartnerName.Direction = ParameterDirection.Input;
					prmPartnerName.Size = 250;
				if (_partnerNameSet == true || this.PartnerName.IsNull == false)
				{
					prmPartnerName.Value = this.PartnerName;
				}
				
				SqlParameter prmAddress = cmd.Parameters.Add("@Address", SqlDbType.NVarChar);
				prmAddress.Direction = ParameterDirection.Input;
					prmAddress.Size = 250;
				if (_addressSet == true || this.Address.IsNull == false)
				{
					prmAddress.Value = this.Address;
				}
				
				SqlParameter prmPhoneNumber = cmd.Parameters.Add("@PhoneNumber", SqlDbType.NVarChar);
				prmPhoneNumber.Direction = ParameterDirection.Input;
					prmPhoneNumber.Size = 50;
				if (_phoneNumberSet == true || this.PhoneNumber.IsNull == false)
				{
					prmPhoneNumber.Value = this.PhoneNumber;
				}
				#endregion
				
				#region Execute Command
				cn.Open();
				_recordsAffected = cmd.ExecuteNonQuery();
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (int)prmReturnValue.Value;
				}
				
				#endregion
			}
			finally
			{
				if (cn.State == ConnectionState.Open)
				{
					cn.Close();
				}
				
				cn.Dispose();
				cmd.Dispose();
			}
		}
		
		/// <summary>
		/// This method calls the PARTNERS_Update stored procedure.
		/// </summary>
		/// <param name="connectionString">The connection string to use</param>
		/// <param name="partnerId"></param>
		/// <param name="partnerName"></param>
		/// <param name="address"></param>
		/// <param name="phoneNumber"></param>
		public static void Execute(
				#region Parameters
				string connectionString,
				SqlInt32 partnerId,
				SqlString partnerName,
				SqlString address,
				SqlString phoneNumber
				#endregion
		    )
		{
			PARTNERS_Update pARTNERS_Update = new PARTNERS_Update();
			
			#region Assign Property Values
			pARTNERS_Update.ConnectionString = connectionString;
			pARTNERS_Update.PartnerId = partnerId;
			pARTNERS_Update.PartnerName = partnerName;
			pARTNERS_Update.Address = address;
			pARTNERS_Update.PhoneNumber = phoneNumber;
			#endregion
			
			pARTNERS_Update.Execute();
			
			#region Get Property Values
			
			#endregion
		}
		#endregion
	}
	#endregion
}
